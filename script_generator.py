import os
from langchain_openai import ChatOpenAI
from langchain.prompts import ChatPromptTemplate
from langchain.schema import HumanMessage, SystemMessage
from typing import Optional

class VideoScriptGenerator:
    def __init__(self):
        """Initialize the video script generator with OpenAI model."""
        self.llm = ChatOpenAI(
            model="gpt-4o",
            temperature=0.7,
            api_key=os.getenv("OPENAI_API_KEY")
        )

        # Define the script generation prompt template
        self.script_prompt_template = ChatPromptTemplate.from_messages([
            ("system", """You are an expert video script writer. Create engaging, well-structured video scripts that are perfect for short-form content.

Your scripts should include:
- A compelling hook in the first 3-5 seconds
- Clear, engaging narration
- Natural transitions between ideas
- A strong call-to-action or conclusion
- Timing cues for video editing
- Visual suggestions for scenes

Format the script with clear timing markers and scene descriptions."""),
            ("human", """Create a {length} video script about: {topic}

Style: {style}

Requirements:
- Make it engaging and informative
- Include timing cues (e.g., [0:00-0:05], [0:05-0:15])
- Add visual scene descriptions in brackets
- Keep the tone {style_lower}
- Ensure it fits the {length} duration
- Make it suitable for social media platforms

Please format the script clearly with timing and visual cues.""")
        ])

    def generate_script(self, prompt: str, length: str = "60 seconds", style: str = "Educational") -> str:
        """
        Generate a video script based on the user's prompt.

        Args:
            prompt (str): The user's video idea or topic
            length (str): Desired script length (e.g., "60 seconds")
            style (str): Script style (Educational, Entertainment, etc.)

        Returns:
            str: The generated video script
        """
        try:
            # Create the prompt with user inputs
            messages = self.script_prompt_template.format_messages(
                topic=prompt,
                length=length,
                style=style,
                style_lower=style.lower()
            )

            # Generate the script
            response = self.llm.invoke(messages)

            # Extract and clean the script
            script = response.content.strip()

            # Add a header with metadata
            formatted_script = f"""# Video Script: {prompt}
# Length: {length}
# Style: {style}
# Generated by AI Video Script Creator

{script}

---
Script generated using LangChain and OpenAI GPT-4
"""

            return formatted_script

        except Exception as e:
            raise Exception(f"Error generating script: {str(e)}")

    def enhance_script(self, script: str, enhancement_type: str = "engagement") -> str:
        """
        Enhance an existing script with additional elements.

        Args:
            script (str): The original script
            enhancement_type (str): Type of enhancement (engagement, humor, etc.)

        Returns:
            str: The enhanced script
        """
        enhancement_prompt = f"""Enhance this video script to make it more {enhancement_type}:

{script}

Please improve the script while maintaining its original structure and timing."""

        try:
            response = self.llm.invoke([HumanMessage(content=enhancement_prompt)])
            return response.content.strip()
        except Exception as e:
            raise Exception(f"Error enhancing script: {str(e)}")

    def create_script_variations(self, prompt: str, num_variations: int = 3) -> list:
        """
        Create multiple script variations for the same topic.

        Args:
            prompt (str): The user's video idea
            num_variations (int): Number of variations to generate

        Returns:
            list: List of script variations
        """
        variations = []

        for i in range(num_variations):
            variation_prompt = f"""Create variation {i+1} of {num_variations} for this video topic: {prompt}

Make this variation unique by:
- Using a different angle or perspective
- Changing the tone or style
- Adding different examples or stories
- Using alternative hooks or conclusions

Keep it engaging and well-structured."""

            try:
                response = self.llm.invoke([HumanMessage(content=variation_prompt)])
                variations.append(response.content.strip())
            except Exception as e:
                variations.append(f"Error generating variation {i+1}: {str(e)}")

        return variations